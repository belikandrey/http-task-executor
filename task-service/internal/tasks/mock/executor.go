// Code generated by MockGen. DO NOT EDIT.
// Source: executor.go
//
// Generated by this command:
//
//	mockgen -source executor.go -destination mock/executor.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	models "http-task-executor/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
	isgomock struct{}
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// ExecuteTask mocks base method.
func (m *MockExecutor) ExecuteTask(task models.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecuteTask", task)
}

// ExecuteTask indicates an expected call of ExecuteTask.
func (mr *MockExecutorMockRecorder) ExecuteTask(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTask", reflect.TypeOf((*MockExecutor)(nil).ExecuteTask), task)
}
